@using  Client.Features.Landing.Components.Categories.Models
@using Client.Features.Landing.Components.Categories.Data
@inject NavigationManager NavigationManager

<section class="h-auto w-full flex flex-col py-[24px] bg-cover bg-center bg-black">
  <div class="container mx-auto px-5 text-center mt-16">
    <div class="flex flex-col gap-4 text-white w-full">
      <h1 class="font-light max-w-[33rem] mx-auto" style="font-size:6vw; margin-top:0;">
        @Title
      </h1>

      <div class="flex flex-col md:flex-row justify-between items-center w-full px-4 md:px-16">
        <div class="bg-[#E1E6ED] p-2 rounded-full flex flex-wrap gap-2 justify-center md:justify-start mx-2 pl-4 pr-4 mb-4 md:mb-0">
          @foreach (var buttonName in CategoryList)
          {
            var isActive = activeButton == buttonName;
            var btnClass = isActive ? "bg-black text-white" : "bg-white text-black";
            <button class="@($"{btnClass} rounded px-2 py-1 text-sm hover:bg-gray-900 hover:text-white focus:outline-none")"
                    @onclick="() => HandleClick(buttonName)">
              @buttonName
            </button>
          }
        </div>

        <div class="relative mx-2 flex items-center mb-4 md:mb-0">
          <svg class="absolute left-3 text-black" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M21 21L15 15" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <circle cx="11" cy="11" r="6" stroke="black" stroke-width="2"/>
          </svg>

          <input type="text"
                 value="@searchQuery"
                 @oninput="HandleSearchChange"
                 class="bg-[#E1E6ED] text-black rounded-full px-4 py-2 pl-10 pr-4 focus:outline-none"
                 placeholder="Search by name..." />
        </div>
      </div>

      <div class="hidden md:flex flex-wrap mt-8 gap-4 justify-center">
        @foreach (var detail in FilteredImageDetails)
        {
          <div class="relative w-1/4 p-2 group flex-box-large">
            <div class="relative h-40 mb-2 overflow-hidden">
              <img src=@($"/assets/{detail.Template}") alt=@($"Image {detail.Name}") class="w-full h-full object-cover transition duration-300 group-hover:blur-sm" />
              <div class="absolute inset-0 flex flex-col items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <button class="bg-customBlue-800 text-white px-4 py-2 mb-2 rounded-full shadow-md" @onclick="() => NavigateToEdit(detail.Name)">Edit</button>
                <button class="bg-customBlue-800 text-white px-4 py-2 rounded-full shadow-md" @onclick="() => NavigateToView(detail.Name)">View</button>
              </div>
            </div>
            <div class="flex justify-between items-start">
              <p class="text-xs text-white">@detail.Text</p>
              <div class="flex">
                @for (int i = 0; i < detail.Stars; i++)
                {
                  @* Simple star SVG *@
                  <svg class="w-4 h-4 text-yellow-400" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.788 1.402 8.172L12 18.896 4.664 23.17l1.402-8.172L.132 9.21l8.2-1.192z"/>
                  </svg>
                }
              </div>
            </div>
          </div>
        }
      </div>

      @* Flex boxes for mobile screens (paginated) *@
      <div class="flex md:hidden flex-wrap mt-8 gap-4 justify-center">
        @foreach (var detail in CurrentItems)
        {
          <div class="relative w-full md:w-1/4 md:p-2 p-1 group flex-box-mobile">
            <div class="relative h-40 mb-2 overflow-hidden">
              <img src=@($"/assets/{detail.Template}") alt=@($"Image {detail.Name}") class="w-full h-full object-cover transition duration-300 group-hover:blur-sm" />
              <div class="absolute inset-0 flex flex-col items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <button class="bg-customBlue-800 text-white px-4 py-2 mb-2 rounded-full shadow-md" @onclick="() => NavigateToEdit(detail.Name)">Edit</button>
                <button class="bg-customBlue-800 text-white px-4 py-2 rounded-full shadow-md" @onclick="() => NavigateToView(detail.Name)">View</button>
              </div>
            </div>
            <div class="flex justify-between items-start">
              <p class="text-xs text-white">@detail.Text</p>
              <div class="flex">
                @for (int i = 0; i < detail.Stars; i++)
                {
                  <svg class="w-4 h-4 text-yellow-400" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 .587l3.668 7.431 8.2 1.192-5.934 5.788 1.402 8.172L12 18.896 4.664 23.17l1.402-8.172L.132 9.21l8.2-1.192z"/>
                  </svg>
                }
              </div>
            </div>
          </div>
        }
      </div>

      @if (FilteredImageDetails.Count() > itemsPerPage)
      {
        <div class="flex justify-center mt-4 md:hidden">
          <button class="bg-white text-black px-3 py-1 rounded-full mr-2 hover:bg-black hover:text-white" @onclick="HandlePrevPage" disabled="@(currentPage == 1)">Previous</button>
          <button class="bg-white text-black px-3 py-1 rounded-full hover:bg-black hover:text-white" @onclick="HandleNextPage" disabled="@(currentPage == TotalPages)">Next</button>
        </div>
      }
    </div>
  </div>
</section>

@code {
    [Parameter] public string Title { get; set; } = "Templates";
    [Parameter] public IEnumerable<TemplateDetail>? ImageDetails { get; set; }
    private string activeButton = "All";
    private string searchQuery = "";
    private int currentPage = 1;

    private const int itemsPerPage = 4;

    private IEnumerable<TemplateDetail> AllItems => ImageDetails ?? TemplateData.Sample();

    private IEnumerable<TemplateDetail> FilteredImageDetails =>
        AllItems
            .Where(d =>
                (activeButton == "All" || string.Equals(d.Category, activeButton, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(searchQuery) || d.Text.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            );

    private int IndexOfLastItem => currentPage * itemsPerPage;
    private int IndexOfFirstItem => IndexOfLastItem - itemsPerPage;
    private List<TemplateDetail> CurrentItems => FilteredImageDetails.Skip(IndexOfFirstItem).Take(itemsPerPage).ToList();
    private int TotalPages => (int)Math.Ceiling((double)FilteredImageDetails.Count() / itemsPerPage);

    private readonly string[] CategoryList = new[] { "All", "Code", "NoCode", "Dark", "Light" };

    private void HandleClick(string buttonName)
    {
        activeButton = buttonName;
        currentPage = 1;
    }

    private void HandleSearchChange(ChangeEventArgs e)
    {
        searchQuery = (e?.Value?.ToString() ?? "").ToLowerInvariant();
        currentPage = 1;
    }

    private void HandleNextPage()
    {
        if (currentPage < TotalPages) currentPage++;
    }

    private void HandlePrevPage()
    {
        if (currentPage > 1) currentPage--;
    }

    private void NavigateToEdit(string name) => NavigationManager.NavigateTo($"/portfolios/edit/{name}");
    private void NavigateToView(string name) => NavigationManager.NavigateTo($"/portfolios/view/{name}");
}
